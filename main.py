# main.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (webhook + YandexGPT + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ /tmp)
import os
import logging
import random
import asyncio
import json
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiohttp import web, ClientSession
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ----------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ) -----------------
# –¢–æ–∫–µ–Ω Telegram (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –∫–æ–¥–µ; —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—ã–Ω–µ—Å—Ç–∏ –≤ env)
BOT_TOKEN = "7276083736:AAGgMbHlOo5ccEvuUV-KXuJ0i2LQlgqEG_I"

# –í–µ–±—Ö—É–∫ (–≤–∞—à Render URL)
WEBHOOK_URL = "https://chekamind2bot.onrender.com/webhook"

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–¥–µ—Å—å
# (Telegram –ø—Ä–∏—à–ª—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Bot-Api-Secret-Token = —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω)
TELEGRAM_SECRET_TOKEN = "chekamind2bot-secret-2025"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–ª–∏–Ω–Ω—É—é —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É

# Yandex Cloud keys (–≤—ã –≤—Å—Ç–∞–≤–∏–ª–∏ –∏—Ö)
YC_API_KEY = "YCAJEXPfGNRARTTxjsV6Y14ek"
YC_FOLDER_ID = "YCMvITcnXbFMtzgZbkrm-kd8KFW-0uZr3wd-1Bii"  # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ folder id ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
YC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ Render
DATA_FILE = os.getenv("DATA_FILE", "/tmp/chekamind_data.json")

# –¢–∞–π–º–∑–æ–Ω—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
MOSCOW_TZ = ZoneInfo("Europe/Moscow")
SAVE_INTERVAL_SECONDS = 60
SELF_PING_INTERVAL_SECONDS = 240
AUTO_FINISH_HOURS = 3
AUTO_FINISH_CHECK_SECONDS = 300
RESTART_DELAY_SECONDS = 5
CLEANUP_MAX_DAYS = 90

# –ü–æ—Ä—Ç (Render –∑–∞–¥–∞—ë—Ç PORT)
PORT = int(os.getenv("PORT", 10000))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger("chekamind-bot")

# ----------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ -----------------
mindfulness_sessions = {}
fitness_sessions = {}
active_fitness_sessions = {}
user_states = {}
subscribed_users = set()
last_save_time = None

# ----------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
MAIN_KEYBOARD = [
    [KeyboardButton("üí° –ó–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è")],
    [KeyboardButton("‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!")],
    [KeyboardButton("‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
    [KeyboardButton("üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
]

STAT_CATEGORY_KEYBOARD = [
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

STAT_PERIOD_KEYBOARD = [
    [KeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

NOTE_CONFIRM_KEYBOARD = [
    [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
]

NOTE_INPUT_KEYBOARD = [
    [KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("üîÑ –û—Ç–º–µ–Ω–∏—Ç—å")]
]

def main_keyboard():
    return ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

def stat_category_keyboard():
    return ReplyKeyboardMarkup(STAT_CATEGORY_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

def stat_period_keyboard():
    return ReplyKeyboardMarkup(STAT_PERIOD_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

def note_confirm_keyboard():
    return ReplyKeyboardMarkup(NOTE_CONFIRM_KEYBOARD, resize_keyboard=True)

def note_input_keyboard():
    return ReplyKeyboardMarkup(NOTE_INPUT_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

# ----------------- –£—Ç–∏–ª–∏—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º -----------------
def now_moscow() -> datetime:
    return datetime.now(MOSCOW_TZ)

def dt_to_iso(dt: datetime) -> str:
    return dt.astimezone(MOSCOW_TZ).isoformat()

def iso_to_dt(iso: str) -> datetime:
    dt = datetime.fromisoformat(iso)
    return dt if dt.tzinfo else dt.replace(tzinfo=MOSCOW_TZ)

def format_duration_from_seconds(seconds: int) -> str:
    td = timedelta(seconds=seconds)
    total_seconds = int(td.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    secs = total_seconds % 60
    if hours:
        return f"{hours}—á {minutes}–º {secs}—Å"
    if minutes:
        return f"{minutes}–º {secs}—Å"
    return f"{secs}—Å"

# ----------------- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ñ–∞–π–ª –≤ /tmp) -----------------
def load_data():
    global mindfulness_sessions, fitness_sessions, last_save_time
    if not os.path.exists(DATA_FILE):
        mindfulness_sessions = {}
        fitness_sessions = {}
        last_save_time = now_moscow()
        logger.info("‚ÑπÔ∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –≤ %s", DATA_FILE)
        return
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        mindfulness_sessions = {int(k): v for k, v in data.get("mindfulness_sessions", {}).items()}
        fitness_sessions = {int(k): v for k, v in data.get("fitness_sessions", {}).items()}
        last_save_time = now_moscow()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ %s", DATA_FILE)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %s", e)
        mindfulness_sessions = {}
        fitness_sessions = {}
        last_save_time = now_moscow()

def save_data(force: bool = False):
    global last_save_time
    now = now_moscow()
    if not force and last_save_time and (now - last_save_time).total_seconds() < SAVE_INTERVAL_SECONDS:
        return
    try:
        data = {
            "mindfulness_sessions": {str(k): v for k, v in mindfulness_sessions.items()},
            "fitness_sessions": {str(k): v for k, v in fitness_sessions.items()}
        }
        tmp = DATA_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, DATA_FILE)
        last_save_time = now
        logger.info("üíæ Data saved to %s", DATA_FILE)
    except Exception as e:
        logger.exception("‚ùå Error saving data: %s", e)

async def periodic_save():
    while True:
        await asyncio.sleep(SAVE_INTERVAL_SECONDS)
        save_data()

def add_mindfulness_session(user_id: int, time_dt: datetime, note: str):
    entry = {"time": dt_to_iso(time_dt), "note": note}
    mindfulness_sessions.setdefault(user_id, []).append(entry)

def add_fitness_session(user_id: int, time_dt: datetime, note: str, duration: timedelta = None):
    entry = {"time": dt_to_iso(time_dt), "note": note}
    if duration is not None:
        entry["duration_seconds"] = int(duration.total_seconds())
    fitness_sessions.setdefault(user_id, []).append(entry)

def cleanup_old_sessions():
    cutoff = now_moscow() - timedelta(days=CLEANUP_MAX_DAYS)
    cleaned = 0
    for user_id in list(mindfulness_sessions.keys()):
        old_len = len(mindfulness_sessions[user_id])
        mindfulness_sessions[user_id] = [s for s in mindfulness_sessions[user_id] if iso_to_dt(s["time"]) >= cutoff]
        cleaned += old_len - len(mindfulness_sessions[user_id])
        if not mindfulness_sessions[user_id]:
            del mindfulness_sessions[user_id]
    for user_id in list(fitness_sessions.keys()):
        old_len = len(fitness_sessions[user_id])
        fitness_sessions[user_id] = [s for s in fitness_sessions[user_id] if iso_to_dt(s["time"]) >= cutoff]
        cleaned += old_len - len(fitness_sessions[user_id])
        if not fitness_sessions[user_id]:
            del fitness_sessions[user_id]
    if cleaned:
        logger.info("üßπ Cleaned %d old sessions", cleaned)
        save_data(force=True)

# ----------------- –í–µ–±—Å–µ—Ä–≤–µ—Ä –∏ webhook -----------------
async def handle_root(request):
    return web.Response(text="üßò Mindfulness Bot is alive!")

async def handle_health(request):
    return web.Response(text="OK", status=200)

def make_webhook_handler(tg_app):
    async def _handler(request):
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TELEGRAM_SECRET_TOKEN:
            logger.warning("Forbidden webhook call (bad secret token)")
            return web.Response(status=403, text="Forbidden")
        try:
            payload = await request.json()
        except Exception:
            return web.Response(status=400, text="Bad JSON")
        try:
            update = Update.de_json(payload, tg_app.bot)
            await tg_app.process_update(update)
        except Exception as e:
            logger.exception("Failed to process update: %s", e)
            return web.Response(status=500, text="Internal Error")
        return web.Response(text="OK")
    return _handler

async def run_webserver(tg_app):
    aio = web.Application()
    aio.add_routes([
        web.get("/", handle_root),
        web.get("/health", handle_health),
        web.post("/webhook", make_webhook_handler(tg_app)),
    ])
    runner = web.AppRunner(aio)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info("üåê Web server started on port %s (webhook path: /webhook)", PORT)

# ----------------- –°–∞–º–æ–ø–∏–Ω–≥ -----------------
async def self_pinger():
    await asyncio.sleep(5)
    url = f"http://127.0.0.1:{PORT}/"
    logger.info("üîÅ Self-pinger: %s every %d sec", url, SELF_PING_INTERVAL_SECONDS)
    async with ClientSession() as sess:
        while True:
            try:
                async with sess.get(url, timeout=10) as resp:
                    logger.debug("Ping: %d", resp.status)
            except Exception as e:
                logger.debug("Ping failed: %s", e)
            await asyncio.sleep(SELF_PING_INTERVAL_SECONDS)

# ----------------- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç.–¥. -----------------
async def fitness_auto_finish_checker(app):
    while True:
        now = now_moscow()
        to_finish = []
        for user_id, start_time in list(active_fitness_sessions.items()):
            duration = now - start_time
            if duration > timedelta(hours=AUTO_FINISH_HOURS):
                to_finish.append((user_id, start_time, duration))
        for user_id, start_time, duration in to_finish:
            del active_fitness_sessions[user_id]
            add_fitness_session(user_id, start_time, "–ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è)", duration)
            try:
                await app.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {AUTO_FINISH_HOURS} —á–∞—Å–æ–≤.")
            except Exception as e:
                logger.debug("Notify failed: %s", e)
        await asyncio.sleep(AUTO_FINISH_CHECK_SECONDS)

async def fitness_reminder_checker(app):
    notified = set()
    while True:
        now = now_moscow()
        for user_id, start_time in list(active_fitness_sessions.items()):
            duration = now - start_time
            if timedelta(hours=2) <= duration < timedelta(hours=2, minutes=6) and user_id not in notified:
                try:
                    await app.bot.send_message(chat_id=user_id, text="üîî –í—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å —É–∂–µ 2 —á–∞—Å–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é!")
                    notified.add(user_id)
                except Exception:
                    pass
            elif duration >= timedelta(hours=AUTO_FINISH_HOURS) or duration < timedelta(hours=2):
                notified.discard(user_id)
        await asyncio.sleep(300)

async def daily_cleanup():
    while True:
        now = now_moscow()
        next_run = now.replace(hour=3, minute=0, second=0, microsecond=0)
        if now >= next_run:
            next_run += timedelta(days=1)
        await asyncio.sleep((next_run - now).total_seconds())
        cleanup_old_sessions()

async def daily_report(app):
    while True:
        now = now_moscow()
        next_report = now.replace(hour=23, minute=0, second=0, microsecond=0)
        if now >= next_report:
            next_report += timedelta(days=1)
        await asyncio.sleep((next_report - now).total_seconds())

        today_start = now_moscow().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow_start = today_start + timedelta(days=1)

        all_users = set(mindfulness_sessions.keys()) | set(fitness_sessions.keys())
        for user_id in list(all_users):
            mindful_today = [s for s in mindfulness_sessions.get(user_id, []) if today_start <= iso_to_dt(s["time"]) < tomorrow_start]
            fitness_today = [s for s in fitness_sessions.get(user_id, []) if today_start <= iso_to_dt(s["time"]) < tomorrow_start]
            if not mindful_today and not fitness_today:
                continue
            total_duration = sum(s.get("duration_seconds", 0) for s in fitness_today)
            duration_str = format_duration_from_seconds(total_duration) if total_duration else "0—Å"
            report = (
                "üåô *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç*\n\n"
                f"üìÖ *–°–µ–≥–æ–¥–Ω—è –≤—ã:* \n"
                f"‚ú® –û—Ç–º–µ—á–∞–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å: {len(mindful_today)} —Ä–∞–∑\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(fitness_today)}\n"
                f"‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {duration_str}\n\n"
                "–ú–æ–ª–æ–¥–µ—Ü! –ó–∞–≤—Ç—Ä–∞ ‚Äî –µ—â—ë –ª—É—á—à–µ üí™"
            )
            try:
                await app.bot.send_message(chat_id=user_id, text=report, parse_mode="Markdown")
            except Exception:
                pass
        await asyncio.sleep(60)

MINDFULNESS_TASKS = [
    "–°–µ–≥–æ–¥–Ω—è –∑–∞–º–µ—á–∞–π, –∫–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –¥—ã—à–∏—à—å. –°–¥–µ–ª–∞–π 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∫–∞–∂–¥—ã–π —á–∞—Å.",
    "–ü–æ—á—É–≤—Å—Ç–≤—É–π —Å–≤–æ–∏ —Å—Ç–æ–ø—ã. –•–æ–¥–∏ –±–æ—Å–∏–∫–æ–º —Ö–æ—Ç—è –±—ã 5 –º–∏–Ω—É—Ç.",
    "–ü–µ–π —á–∞–π –∏–ª–∏ –∫–æ—Ñ–µ, –Ω–µ –≥–ª—è–¥—è –≤ —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ—á—É–≤—Å—Ç–≤—É–π –≤–∫—É—Å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –∑–∞–ø–∞—Ö.",
    "–ó–∞–º–µ—Ç—å –æ–¥–Ω–æ —á—É–≤—Å—Ç–≤–æ –≤ —Ç–µ–ª–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞: —Ç–µ–ø–ª–æ, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –ª—ë–≥–∫–æ—Å—Ç—å.",
    "–ü–æ—Å–ª—É—à–∞–π 1 –º–∏–Ω—É—Ç—É —Ç–∏—à–∏–Ω—ã. –ß—Ç–æ —Å–ª—ã—à–∏—à—å? –ê –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ ‚Äî —ç—Ç–æ —Ç–æ–∂–µ –æ–∫.",
    "–°–¥–µ–ª–∞–π 10 —à–∞–≥–æ–≤ –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ. –ü–æ—á—É–≤—Å—Ç–≤—É–π –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –¥–≤–∏–∂–µ–Ω–∏—è.",
    "–ó–∞–º–µ—Ç—å, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ù–∞–∑–æ–≤–∏ —ç—Ç–æ: '–≠—Ç–æ ‚Äî —Ç—Ä–µ–≤–æ–≥–∞', '–≠—Ç–æ ‚Äî —É—Å—Ç–∞–ª–æ—Å—Ç—å'.",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ –∏ –Ω–∞–π–¥–∏ 3 –∑–µ–ª—ë–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞. –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏ ‚Äî –±–µ–∑ –æ—Ü–µ–Ω–æ–∫.",
    "–î–æ—Ç—Ä–æ–Ω—å—Å—è –¥–æ —á–µ–≥–æ-—Ç–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–≥–æ –∏–ª–∏ —Ç—ë–ø–ª–æ–≥–æ. –ü–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É.",
    "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç–µ. –ü–æ–¥—ã—à–∏ 3 —Ä–∞–∑–∞.",
]

async def daily_task_sender(app):
    while True:
        now = now_moscow()
        next_send = now.replace(hour=10, minute=0, second=0, microsecond=0)
        if now >= next_send:
            next_send += timedelta(days=1)
        await asyncio.sleep((next_send - now).total_seconds())
        task = random.choice(MINDFULNESS_TASKS)
        for user_id in list(subscribed_users):
            try:
                await app.bot.send_message(chat_id=user_id, text=f"üåÖ *–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{task}\n\n–£–¥–∞—á–∏! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è üíõ", parse_mode="Markdown")
            except Exception:
                subscribed_users.discard(user_id)
        await asyncio.sleep(60)

# ----------------- YANDEX GPT -----------------
async def get_ai_response(prompt: str) -> str:
    if not YC_API_KEY or not YC_FOLDER_ID:
        return "‚ùå –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    system_message = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–æ—Å—Ç—É. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å –∑–∞–±–æ—Ç–æ–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫. "
        "–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —ç–º–æ–¥–∑–∏, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ."
    )
    payload = {
        "modelUri": f"gpt://{YC_FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {"temperature": 0.6, "maxTokens": 500},
        "messages": [
            {"role": "system", "text": system_message},
            {"role": "user", "text": prompt},
        ],
    }
    headers = {"Authorization": f"Api-Key {YC_API_KEY}", "Content-Type": "application/json"}
    try:
        async with ClientSession() as session:
            async with session.post(YC_API_URL, json=payload, headers=headers, timeout=15) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error("YandexGPT error %d: %s", resp.status, error_text)
                    return "üß† –ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                data = await resp.json()
                try:
                    return data["result"]["alternatives"][0]["message"]["text"].strip()
                except Exception:
                    logger.error("Unexpected YandexGPT response: %s", data)
                    return "üß† –ò–∑–≤–∏–Ω–∏, –ò–ò –æ—Ç–≤–µ—Ç–∏–ª –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
    except Exception as e:
        logger.exception("YandexGPT request failed: %s", e)
        return "üß† –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò."

# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states.pop(user_id, None)
    if user_id in active_fitness_sessions:
        start_time = active_fitness_sessions[user_id]
        await update.message.reply_text(f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å {start_time.strftime('%H:%M')}!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –∫–Ω–æ–ø–∫–æ–π ¬´üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª.\n\n–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ üå±", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ üå±\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.", reply_markup=main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = (update.message.text or "").strip()
    user_id = update.effective_user.id
    state = user_states.get(user_id, {})

    # –í–æ–ø—Ä–æ—Å –∫ –ò–ò
    if state.get("awaiting_ai_question"):
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_states.pop(user_id, None)
            await update.message.reply_text("–û–±—â–µ–Ω–∏–µ —Å –ò–ò –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        await update.message.reply_text("üß† –î—É–º–∞—é...")
        response = await get_ai_response(text)
        await update.message.reply_text(response, reply_markup=main_keyboard())
        user_states.pop(user_id, None)
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "üí° –ó–∞–¥–∞–Ω–∏–µ":
        await update.message.reply_text(random.choice(["–ó–∞–¥–∞—á–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ª–æ.", "–ó–∞–¥–∞—á–∞: —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.", "–ó–∞–¥–∞—á–∞: –ø–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è."]))
        return

    if text == "üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è":
        await update.message.reply_text(random.choice(["–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á—Ç–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è?", "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á–µ–≥–æ —Ç—ã –¥–æ–±–∏–ª—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"]))
        return

    if text == "‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!":
        now = now_moscow()
        user_states[user_id] = {"awaiting_note_confirm": True, "session_type": "mindfulness", "session_time": now, "duration": None}
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏?", reply_markup=note_confirm_keyboard())
        return

    if text == "‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        if user_id in active_fitness_sessions:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é.", reply_markup=main_keyboard())
            return
        start_time = now_moscow()
        active_fitness_sessions[user_id] = start_time
        user_states[user_id] = {"awaiting_note_confirm": True, "session_type": "fitness", "session_time": start_time, "duration": None}
        await update.message.reply_text(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞ –≤ {start_time.strftime('%H:%M')}!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", reply_markup=note_confirm_keyboard())
        return

    if text == "üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        start_time = active_fitness_sessions.get(user_id)
        if not start_time:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.", reply_markup=main_keyboard())
            return
        end_time = now_moscow()
        duration = end_time - start_time
        del active_fitness_sessions[user_id]
        user_states[user_id] = {"awaiting_note_confirm": True, "session_type": "fitness", "session_time": start_time, "duration": duration}
        await update.message.reply_text(f"üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚è± –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n‚è± –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time.strftime('%H:%M')}\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(duration).split('.')[0]}\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?", reply_markup=note_confirm_keyboard())
        return

    if text == "üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò":
        user_states[user_id] = {"awaiting_ai_question": True}
        await update.message.reply_text("üí≠ –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –ø–æ–∑–∏—Ü–∏–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π?¬ª", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True))
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        user_states[user_id] = {"menu": "stat_category"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stat_category_keyboard())
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        user_states.pop(user_id, None)
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note_confirm"):
        if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
            user_states[user_id] = {"awaiting_note": True, "session_type": state["session_type"], "session_time": state["session_time"], "duration": state.get("duration")}
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:", reply_markup=note_input_keyboard())
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            user_states.pop(user_id, None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=note_confirm_keyboard())
            return

    # –í–≤–æ–¥ –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note"):
        note = "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏" if text in ["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "üîÑ –û—Ç–º–µ–Ω–∏—Ç—å"] else text
        session_time = state["session_time"]
        session_type = state["session_type"]
        duration = state.get("duration")
        if session_type == "fitness":
            add_fitness_session(user_id, session_time, note, duration)
        else:
            add_mindfulness_session(user_id, session_time, note)
        user_states.pop(user_id, None)
        save_data()
        if note == "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏":
            await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=main_keyboard())
        else:
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ¬´{note}¬ª", reply_markup=main_keyboard())
        return

    # –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—ã–≤–æ–¥
    if state.get("menu") == "stat_category":
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏":
            user_states[user_id] = {"menu": "stat_period", "stat_category": "mindfulness"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stat_period_keyboard())
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É":
            user_states[user_id] = {"menu": "stat_period", "stat_category": "fitness"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stat_period_keyboard())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stat_category_keyboard())
        return

    if state.get("menu") == "stat_period":
        now = now_moscow()
        if text == "üìÖ –ó–∞ –¥–µ–Ω—å":
            period_start = now - timedelta(days=1)
        elif text == "üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é":
            period_start = now - timedelta(days=7)
        elif text == "üîô –ù–∞–∑–∞–¥":
            user_states[user_id] = {"menu": "stat_category"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=stat_category_keyboard())
            return
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stat_period_keyboard())
            return

        cat = state["stat_category"]
        sessions = mindfulness_sessions.get(user_id, []) if cat == "mindfulness" else fitness_sessions.get(user_id, [])
        title = "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏" if cat == "mindfulness" else "—Å–ø–æ—Ä—Ç–∞"
        filtered = [(iso_to_dt(s["time"]), s) for s in sessions if iso_to_dt(s["time"]) >= period_start]
        if not filtered:
            await update.message.reply_text(f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title}.", reply_markup=main_keyboard())
            return

        msg = (f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {title}* –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {period_start.strftime('%d.%m.%Y')} –ø–æ {now.strftime('%d.%m.%Y')}:\n"
               f"üî¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(filtered)}\n\n")
        for dt, s in filtered:
            time_str = dt.strftime("%d.%m %H:%M")
            note = (s.get("note") or "").strip()
            dur = s.get("duration_seconds")
            dur_str = f"‚è± {format_duration_from_seconds(dur)}" if dur else ""
            entry = f"üîπ *{time_str}*"
            if dur_str:
                entry += f" | {dur_str}"
            entry += "\n"
            if note and note != "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏":
                entry += f"  üìù _{note}_"
            else:
                entry += f"  üí¨ _–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏_"
            msg += entry + "\n\n"
        user_states.pop(user_id, None)
        await update.message.reply_text(msg, reply_markup=main_keyboard(), parse_mode="Markdown")
        return

    # fallback
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_keyboard())

# ----------------- –ó–∞–ø—É—Å–∫ (webhook) -----------------
async def run_bot():
    load_data()
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL, secret_token=TELEGRAM_SECRET_TOKEN, drop_pending_updates=True)
    await application.start()

    # —Ñ–æ–Ω–æ–≤—ã–µ —Ç–∞—Å–∫–∏ –∏ –≤–µ–±—Å–µ—Ä–≤–µ—Ä (aiohttp)
    application.create_task(run_webserver(application))
    application.create_task(self_pinger())
    application.create_task(fitness_auto_finish_checker(application))
    application.create_task(fitness_reminder_checker(application))
    application.create_task(daily_cleanup())
    application.create_task(periodic_save())
    application.create_task(daily_report(application))
    application.create_task(daily_task_sender(application))

    logger.info("üöÄ Bot started, webhook set to %s", WEBHOOK_URL)
    await asyncio.Event().wait()

async def main():
    while True:
        try:
            await run_bot()
        except Exception:
            logger.exception("üí• –ë–æ—Ç —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %d —Å–µ–∫...", RESTART_DELAY_SECONDS)
            await asyncio.sleep(RESTART_DELAY_SECONDS)

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception:
        logger.exception("Fatal error in main loop")
