import os
import logging
import random
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from aiohttp import web, ClientSession
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "7276083736:AAGgMbHlOo5ccEvuUV-KXuJ0i2LQlgqEG_I"
YC_API_KEY = os.getenv("YC_API_KEY")
YC_FOLDER_ID = os.getenv("YC_FOLDER_ID")
YC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
AUTO_FINISH_HOURS = 3
AUTO_FINISH_CHECK_SECONDS = 300
DAILY_REPORT_HOUR = 23
PORT = int(os.getenv("PORT", 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
class DataStorage:
    def __init__(self):
        self.mindfulness_sessions = {}   # user_id -> [{'time': dt, 'note': str}]
        self.fitness_sessions = {}       # user_id -> [{'time': dt, 'note': str, 'duration_seconds': int}]
        self.active_fitness_sessions = {}  # user_id -> datetime (Moscow)
        self.user_states = {}            # user_id -> dict

storage = DataStorage()

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def create_keyboard(buttons, resize=True, one_time=False):
    return ReplyKeyboardMarkup(buttons, resize_keyboard=resize, one_time_keyboard=one_time)

def main_menu():
    return create_keyboard([
        [KeyboardButton("üí° –ó–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è")],
        [KeyboardButton("‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!")],
        [KeyboardButton("‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton("üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ])

def stats_category_menu():
    return create_keyboard([
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ])

def stats_period_menu():
    return create_keyboard([
        [KeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ])

def note_confirmation_menu():
    return create_keyboard([
        [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ])

def note_input_menu():
    return create_keyboard([
        [KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("üîÑ –û—Ç–º–µ–Ω–∏—Ç—å")]
    ], one_time=True)

def cancel_menu():
    return create_keyboard([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], one_time=True)

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def now_moscow() -> datetime:
    return datetime.now(MOSCOW_TZ)

def format_duration(seconds: int) -> str:
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    if hours > 0:
        return f"{hours}—á {minutes}–º {seconds}—Å"
    if minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    return f"{seconds}—Å"

async def get_ai_response(prompt: str) -> str:
    if not YC_API_KEY or not YC_FOLDER_ID:
        return "‚ùå –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."

    system_message = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–æ—Å—Ç—É. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å –∑–∞–±–æ—Ç–æ–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫. "
        "–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —ç–º–æ–¥–∑–∏, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ."
    )

    payload = {
        "modelUri": f"gpt://{YC_FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {
            "temperature": 0.6,
            "maxTokens": 500
        },
        "messages": [
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt}
        ]
    }

    headers = {
        "Authorization": f"Api-Key {YC_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        async with ClientSession() as session:
            async with session.post(YC_API_URL, json=payload, headers=headers, timeout=15) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error("YandexGPT error %d: %s", resp.status, error_text)
                    return "üß† –ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                data = await resp.json()
                return data["result"]["alternatives"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error("YandexGPT request failed: %s", e)
        return "üß† –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò."

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    storage.user_states.pop(user.id, None)
    
    if user.id in storage.active_fitness_sessions:
        start_time = storage.active_fitness_sessions[user.id]
        await update.message.reply_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å {start_time.strftime('%H:%M')}!\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –∫–Ω–æ–ø–∫–æ–π ¬´üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª.\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ üå±",
            reply_markup=main_menu()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
            reply_markup=main_menu()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = update.message.text.strip()
    user_id = update.effective_user.id
    state = storage.user_states.get(user_id, {})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if state.get("awaiting_ai"):
        await handle_ai_response(update, user_id, text)
        return
        
    if state.get("awaiting_note"):
        await handle_note_input(update, user_id, text)
        return
        
    if state.get("awaiting_confirmation"):
        await handle_note_confirmation(update, user_id, text)
        return
        
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text == "üí° –ó–∞–¥–∞–Ω–∏–µ":
        await send_random_task(update)
    elif text == "üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è":
        await send_random_reflection(update)
    elif text == "‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!":
        await start_mindfulness_session(update, user_id)
    elif text == "‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        await start_workout_session(update, user_id)
    elif text == "üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        await finish_workout_session(update, user_id)
    elif text == "üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò":
        await start_ai_conversation(update, user_id)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics_menu(update, user_id)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await return_to_main_menu(update, user_id)
    else:
        await handle_statistics_menus(update, user_id, text, state)

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–°–¢–û–Ø–ù–ò–ô ====================
async def handle_ai_response(update: Update, user_id: int, text: str):
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        storage.user_states.pop(user_id, None)
        await update.message.reply_text("–û–±—â–µ–Ω–∏–µ —Å –ò–ò –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
        return
        
    await update.message.reply_text("üß† –î—É–º–∞—é...")
    response = await get_ai_response(text)
    storage.user_states.pop(user_id, None)
    await update.message.reply_text(response, reply_markup=main_menu())

async def handle_note_input(update: Update, user_id: int, text: str):
    state = storage.user_states[user_id]
    note = "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏" if text in ["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "üîÑ –û—Ç–º–µ–Ω–∏—Ç—å"] else text
    
    if state["session_type"] == "mindfulness":
        storage.mindfulness_sessions.setdefault(user_id, []).append({
            "time": state["session_time"],
            "note": note
        })
    else:  # fitness
        storage.fitness_sessions.setdefault(user_id, []).append({
            "time": state["session_time"],
            "note": note,
            "duration_seconds": int(state["duration"].total_seconds()) if state["duration"] else None
        })
    
    storage.user_states.pop(user_id, None)
    message = f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ¬´{note}¬ª" if note != "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏" else "–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏."
    await update.message.reply_text(message, reply_markup=main_menu())

async def handle_note_confirmation(update: Update, user_id: int, text: str):
    state = storage.user_states[user_id]
    
    if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
        storage.user_states[user_id] = {
            "awaiting_note": True,
            "session_type": state["session_type"],
            "session_time": state["session_time"],
            "duration": state.get("duration")
        }
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:", reply_markup=note_input_menu())
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        storage.user_states.pop(user_id, None)
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=note_confirmation_menu())

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
async def send_random_task(update: Update):
    tasks = [
        "–ó–∞–¥–∞—á–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ª–æ.",
        "–ó–∞–¥–∞—á–∞: —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.",
        "–ó–∞–¥–∞—á–∞: –ø–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è."
    ]
    await update.message.reply_text(random.choice(tasks))

async def send_random_reflection(update: Update):
    reflections = [
        "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á—Ç–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è?",
        "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á–µ–≥–æ —Ç—ã –¥–æ–±–∏–ª—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"
    ]
    await update.message.reply_text(random.choice(reflections))

async def start_mindfulness_session(update: Update, user_id: int):
    storage.user_states[user_id] = {
        "awaiting_confirmation": True,
        "session_type": "mindfulness",
        "session_time": now_moscow(),
        "duration": None
    }
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏?", reply_markup=note_confirmation_menu())

async def start_workout_session(update: Update, user_id: int):
    if user_id in storage.active_fitness_sessions:
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é.", reply_markup=main_menu())
        return
        
    start_time = now_moscow()
    storage.active_fitness_sessions[user_id] = start_time
    storage.user_states[user_id] = {
        "awaiting_confirmation": True,
        "session_type": "fitness",
        "session_time": start_time,
        "duration": None
    }
    await update.message.reply_text(
        f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞ –≤ {start_time.strftime('%H:%M')}!",
        reply_markup=note_confirmation_menu()
    )

async def finish_workout_session(update: Update, user_id: int):
    start_time = storage.active_fitness_sessions.pop(user_id, None)
    if not start_time:
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.", reply_markup=main_menu())
        return
        
    duration = now_moscow() - start_time
    storage.user_states[user_id] = {
        "awaiting_confirmation": True,
        "session_type": "fitness",
        "session_time": start_time,
        "duration": duration
    }
    await update.message.reply_text(
        f"üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(duration).split('.')[0]}\n"
        "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?",
        reply_markup=note_confirmation_menu()
    )

async def start_ai_conversation(update: Update, user_id: int):
    storage.user_states[user_id] = {"awaiting_ai": True}
    await update.message.reply_text(
        "üí≠ –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –ø–æ–∑–∏—Ü–∏–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.",
        reply_markup=cancel_menu()
    )

async def show_statistics_menu(update: Update, user_id: int):
    storage.user_states[user_id] = {"menu": "stat_category"}
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_category_menu())

async def return_to_main_menu(update: Update, user_id: int):
    storage.user_states.pop(user_id, None)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò ====================
async def handle_statistics_menus(update: Update, user_id: int, text: str, state: dict):
    if state.get("menu") == "stat_category":
        await handle_stat_category(update, user_id, text)
    elif state.get("menu") == "stat_period":
        await handle_stat_period(update, user_id, text, state)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu())

async def handle_stat_category(update: Update, user_id: int, text: str):
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏":
        storage.user_states[user_id] = {"menu": "stat_period", "stat_category": "mindfulness"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stats_period_menu())
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É":
        storage.user_states[user_id] = {"menu": "stat_period", "stat_category": "fitness"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stats_period_menu())
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stats_category_menu())

async def handle_stat_period(update: Update, user_id: int, text: str, state: dict):
    if text == "üîô –ù–∞–∑–∞–¥":
        storage.user_states[user_id] = {"menu": "stat_category"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=stats_category_menu())
        return
        
    now = now_moscow()
    if text == "üìÖ –ó–∞ –¥–µ–Ω—å":
        period_start = now - timedelta(days=1)
    elif text == "üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é":
        period_start = now - timedelta(days=7)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stats_period_menu())
        return

    cat = state["stat_category"]
    sessions = storage.mindfulness_sessions if cat == "mindfulness" else storage.fitness_sessions
    user_sessions = sessions.get(user_id, [])
    title = "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏" if cat == "mindfulness" else "—Å–ø–æ—Ä—Ç–∞"

    filtered = [s for s in user_sessions if s["time"] >= period_start]
    if not filtered:
        await update.message.reply_text(f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title}.", reply_markup=main_menu())
        storage.user_states.pop(user_id, None)
        return

    msg = format_statistics_message(filtered, period_start, now, title, cat)
    storage.user_states.pop(user_id, None)
    await update.message.reply_text(msg, reply_markup=main_menu(), parse_mode="Markdown")

def format_statistics_message(sessions, period_start, now, title, cat):
    msg = (f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {title}* –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {period_start.strftime('%d.%m.%Y')} "
           f"–ø–æ {now.strftime('%d.%m.%Y')}:\nüî¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(sessions)}\n\n")
    
    for s in sessions:
        time_str = s["time"].strftime("%d.%m %H:%M")
        note = s.get("note", "").strip()
        dur = s.get("duration_seconds")
        dur_str = f"‚è± {format_duration(dur)}" if dur else ""

        entry = f"üîπ *{time_str}*"
        if dur_str:
            entry += f" | {dur_str}"
        entry += "\n"
        if note and note != "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏":
            entry += f"  üìù _{note}_"
        else:
            entry += f"  üí¨ _–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏_"
        msg += entry + "\n\n"
    
    return msg

# ==================== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ====================
async def fitness_auto_finish_checker(app):
    while True:
        now = now_moscow()
        for user_id, start_time in list(storage.active_fitness_sessions.items()):
            if now - start_time > timedelta(hours=AUTO_FINISH_HOURS):
                duration = int((now - start_time).total_seconds())
                storage.fitness_sessions.setdefault(user_id, []).append({
                    "time": start_time,
                    "note": "–ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
                    "duration_seconds": duration
                })
                del storage.active_fitness_sessions[user_id]
                try:
                    await app.bot.send_message(
                        user_id,
                        f"‚è≥ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {AUTO_FINISH_HOURS} —á–∞—Å–æ–≤"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await asyncio.sleep(AUTO_FINISH_CHECK_SECONDS)

async def daily_report(app):
    while True:
        now = now_moscow()
        target = now.replace(hour=DAILY_REPORT_HOUR, minute=0, second=0, microsecond=0)
        if now >= target:
            target += timedelta(days=1)
        await asyncio.sleep((target - now).total_seconds())

        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        for user_id in list(storage.mindfulness_sessions.keys()):
            mindful_today = len([s for s in storage.mindfulness_sessions.get(user_id, []) 
                              if s["time"] >= today_start])
            fitness_today = [s for s in storage.fitness_sessions.get(user_id, []) 
                           if s["time"] >= today_start]
            total_duration = sum(s.get("duration_seconds", 0) for s in fitness_today)

            if mindful_today or fitness_today:
                try:
                    await app.bot.send_message(
                        user_id,
                        f"üåô *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç*\n\n"
                        f"‚ú® –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å: {mindful_today} —Ä–∞–∑\n"
                        f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(fitness_today)}\n"
                        f"‚è± –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {format_duration(total_duration)}",
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {e}")

# ==================== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø PING ====================
async def handle_root(request):
    return web.Response(text="üßò Mindfulness Bot is alive!")

async def handle_health(request):
    return web.Response(text="OK", status=200)

async def run_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle_root), web.get("/health", handle_health)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    # –°–æ–∑–¥–∞–µ–º Application –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await run_webserver()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    async with application:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(fitness_auto_finish_checker(application))
        asyncio.create_task(daily_report(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.start()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        try:
            while True:
                await asyncio.sleep(3600)
        except asyncio.CancelledError:
            pass
        finally:
            await application.stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
