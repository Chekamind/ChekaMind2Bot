import os
import logging
import random
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from aiohttp import web, ClientSession
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
BOT_TOKEN = "7276083736:AAGgMbHlOo5ccEvuUV-KXuJ0i2LQlgqEG_I"

YC_API_KEY = os.getenv("YC_API_KEY")
YC_FOLDER_ID = os.getenv("YC_FOLDER_ID")
YC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

MOSCOW_TZ = ZoneInfo("Europe/Moscow")

AUTO_FINISH_HOURS = 3
AUTO_FINISH_CHECK_SECONDS = 300
RESTART_DELAY_SECONDS = 5

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ –ø–∞–º—è—Ç–∏) -----------------
mindfulness_sessions = {}   # user_id -> [{'time': dt, 'note': str}]
fitness_sessions = {}       # user_id -> [{'time': dt, 'note': str, 'duration_seconds': int}]
active_fitness_sessions = {}  # user_id -> datetime (Moscow)
user_states = {}            # user_id -> dict

# ----------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
MAIN_KEYBOARD = [
    [KeyboardButton("üí° –ó–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è")],
    [KeyboardButton("‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!")],
    [KeyboardButton("‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
    [KeyboardButton("üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
]

STAT_CATEGORY_KEYBOARD = [
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

STAT_PERIOD_KEYBOARD = [
    [KeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

NOTE_CONFIRM_KEYBOARD = [
    [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
]

NOTE_INPUT_KEYBOARD = [
    [KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("üîÑ –û—Ç–º–µ–Ω–∏—Ç—å")]
]

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------
def now_moscow() -> datetime:
    return datetime.now(MOSCOW_TZ)

def format_duration_from_seconds(seconds: int) -> str:
    td = timedelta(seconds=seconds)
    total_seconds = int(td.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    secs = total_seconds % 60
    if hours:
        return f"{hours}—á {minutes}–º {secs}—Å"
    if minutes:
        return f"{minutes}–º {secs}—Å"
    return f"{secs}—Å"

# ----------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------
def main_keyboard():
    return ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

def stat_category_keyboard():
    return ReplyKeyboardMarkup(STAT_CATEGORY_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

def stat_period_keyboard():
    return ReplyKeyboardMarkup(STAT_PERIOD_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

def note_confirm_keyboard():
    return ReplyKeyboardMarkup(NOTE_CONFIRM_KEYBOARD, resize_keyboard=True)

def note_input_keyboard():
    return ReplyKeyboardMarkup(NOTE_INPUT_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)

# ----------------- –í–µ–±-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è keep-alive) -----------------
async def handle_root(request):
    return web.Response(text="üßò Mindfulness Bot is alive!")

async def handle_health(request):
    return web.Response(text="OK", status=200)

async def run_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle_root), web.get("/health", handle_health)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# ----------------- –°–∞–º–æ–ø–∏–Ω–≥ (–¥–ª—è keep-alive) -----------------
async def self_pinger():
    await asyncio.sleep(5)
    url = f"http://127.0.0.1:{os.getenv('PORT', 10000)}/"
    logger.info("üîÅ –°–∞–º–æ–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: %s –∫–∞–∂–¥—ã–µ 240 —Å–µ–∫", url)
    async with ClientSession() as sess:
        while True:
            try:
                async with sess.get(url, timeout=10) as resp:
                    logger.debug("Ping: %d", resp.status)
            except Exception as e:
                logger.warning("Ping failed: %s", e)
            await asyncio.sleep(240)

# ----------------- –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -----------------
async def fitness_auto_finish_checker(app):
    while True:
        now = now_moscow()
        to_finish = []
        for user_id, start_time in list(active_fitness_sessions.items()):
            duration = now - start_time
            if duration > timedelta(hours=AUTO_FINISH_HOURS):
                to_finish.append((user_id, start_time, duration))
        for user_id, start_time, duration in to_finish:
            del active_fitness_sessions[user_id]
            if user_id not in fitness_sessions:
                fitness_sessions[user_id] = []
            fitness_sessions[user_id].append({
                "time": start_time,
                "note": "–ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è)",
                "duration_seconds": int(duration.total_seconds())
            })
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –Ω–∞—á–∞—Ç–∞—è –≤ {start_time.strftime('%H:%M')}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {AUTO_FINISH_HOURS} —á–∞—Å–æ–≤."
                )
            except Exception as e:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, e)
        await asyncio.sleep(AUTO_FINISH_CHECK_SECONDS)

# ----------------- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 23:00 (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å) -----------------
async def daily_report(app):
    while True:
        now = now_moscow()
        next_report = now.replace(hour=23, minute=0, second=0, microsecond=0)
        if now >= next_report:
            next_report += timedelta(days=1)
        wait_seconds = (next_report - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        today_start = now_moscow().replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow_start = today_start + timedelta(days=1)

        for user_id in list(mindfulness_sessions.keys()):
            mindful_today = [
                s for s in mindfulness_sessions.get(user_id, [])
                if s["time"] >= today_start and s["time"] < tomorrow_start
            ]

            fitness_today = [
                s for s in fitness_sessions.get(user_id, [])
                if s["time"] >= today_start and s["time"] < tomorrow_start
            ]

            total_duration = sum(s.get("duration_seconds", 0) for s in fitness_today)
            duration_str = format_duration_from_seconds(total_duration) if total_duration else "0—Å"

            if not mindful_today and not fitness_today:
                continue

            report = (
                "üåô *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç*\n\n"
                f"üìÖ *–°–µ–≥–æ–¥–Ω—è –≤—ã:* \n"
                f"‚ú® –û—Ç–º–µ—á–∞–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å: {len(mindful_today)} —Ä–∞–∑\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(fitness_today)}\n"
                f"‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {duration_str}\n\n"
                "–ú–æ–ª–æ–¥–µ—Ü! –ó–∞–≤—Ç—Ä–∞ ‚Äî –µ—â—ë –ª—É—á—à–µ üí™"
            )

            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=report,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)

        logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        await asyncio.sleep(60)

# ----------------- YandexGPT: –æ–±—â–µ–Ω–∏–µ —Å –ò–ò -----------------
async def get_ai_response(prompt: str) -> str:
    if not YC_API_KEY or not YC_FOLDER_ID:
        return "‚ùå –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."

    system_message = (
        "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É —Ä–æ—Å—Ç—É. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å –∑–∞–±–æ—Ç–æ–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫. "
        "–ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —ç–º–æ–¥–∑–∏, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ."
    )

    payload = {
        "modelUri": f"gpt://{YC_FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {
            "temperature": 0.6,
            "maxTokens": 500
        },
        "messages": [
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt}
        ]
    }

    headers = {
        "Authorization": f"Api-Key {YC_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        async with ClientSession() as session:
            async with session.post(YC_API_URL, json=payload, headers=headers, timeout=15) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    logger.error("YandexGPT error %d: %s", resp.status, error_text)
                    return "üß† –ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
                data = await resp.json()
                return data["result"]["alternatives"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error("YandexGPT request failed: %s", e)
        return "üß† –ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò."

# ----------------- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states.pop(user_id, None)

    if user_id in active_fitness_sessions:
        start_time = active_fitness_sessions[user_id]
        await update.message.reply_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å {start_time.strftime('%H:%M')}!\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –∫–Ω–æ–ø–∫–æ–π ¬´üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª.\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ üå±",
            reply_markup=main_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ üå±\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.",
            reply_markup=main_keyboard()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    text = (update.message.text or "").strip()
    user_id = update.effective_user.id
    state = user_states.get(user_id, {})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò
    if state.get("awaiting_ai_question"):
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_states.pop(user_id, None)
            await update.message.reply_text("–û–±—â–µ–Ω–∏–µ —Å –ò–ò –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        await update.message.reply_text("üß† –î—É–º–∞—é...")
        response = await get_ai_response(text)
        await update.message.reply_text(response, reply_markup=main_keyboard())
        user_states.pop(user_id, None)
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if text == "üí° –ó–∞–¥–∞–Ω–∏–µ":
        await update.message.reply_text(random.choice([
            "–ó–∞–¥–∞—á–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ª–æ.",
            "–ó–∞–¥–∞—á–∞: —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.",
            "–ó–∞–¥–∞—á–∞: –ø–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è.",
        ]))
        return

    if text == "üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è":
        await update.message.reply_text(random.choice([
            "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á—Ç–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è?",
            "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á–µ–≥–æ —Ç—ã –¥–æ–±–∏–ª—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        ]))
        return

    if text == "‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!":
        now = now_moscow()
        if user_id not in mindfulness_sessions:
            mindfulness_sessions[user_id] = []
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "mindfulness",
            "session_time": now,
            "duration": None
        }
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏?", reply_markup=note_confirm_keyboard())
        return

    if text == "‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        if user_id in active_fitness_sessions:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é.", reply_markup=main_keyboard())
            return
        start_time = now_moscow()
        active_fitness_sessions[user_id] = start_time
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "fitness",
            "session_time": start_time,
            "duration": None
        }
        await update.message.reply_text(
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞ –≤ {start_time.strftime('%H:%M')}!\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
            reply_markup=note_confirm_keyboard()
        )
        return

    if text == "üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        start_time = active_fitness_sessions.get(user_id)
        if not start_time:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.", reply_markup=main_keyboard())
            return
        end_time = now_moscow()
        duration = end_time - start_time
        del active_fitness_sessions[user_id]
        if user_id not in fitness_sessions:
            fitness_sessions[user_id] = []
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "fitness",
            "session_time": start_time,
            "duration": duration
        }
        await update.message.reply_text(
            f"üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚è± –ù–∞—á–∞–ª–æ: {start_time.strftime('%H:%M')}\n"
            f"‚è± –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time.strftime('%H:%M')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(duration).split('.')[0]}\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?",
            reply_markup=note_confirm_keyboard()
        )
        return

    if text == "üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ò–ò":
        user_states[user_id] = {"awaiting_ai_question": True}
        await update.message.reply_text(
            "üí≠ –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å –ø–æ–∑–∏—Ü–∏–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π?¬ª",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        user_states[user_id] = {"menu": "stat_category"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stat_category_keyboard())
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        user_states.pop(user_id, None)
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note_confirm"):
        if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
            user_states[user_id] = {
                "awaiting_note": True,
                "session_type": state["session_type"],
                "session_time": state["session_time"],
                "duration": state.get("duration")
            }
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:",
                reply_markup=note_input_keyboard()
            )
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            user_states.pop(user_id, None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard())
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=note_confirm_keyboard())
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note"):
        note = "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏" if text in ["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "üîÑ –û—Ç–º–µ–Ω–∏—Ç—å"] else text
        session_time = state["session_time"]
        session_type = state["session_type"]
        duration = state.get("duration")

        if session_type == "fitness":
            if user_id not in fitness_sessions:
                fitness_sessions[user_id] = []
            fitness_sessions[user_id].append({
                "time": session_time,
                "note": note,
                "duration_seconds": int(duration.total_seconds()) if duration else None
            })
        else:
            if user_id not in mindfulness_sessions:
                mindfulness_sessions[user_id] = []
            mindfulness_sessions[user_id].append({
                "time": session_time,
                "note": note
            })

        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ¬´{note}¬ª" if note != "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏" else "–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏.",
            reply_markup=main_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if state.get("menu") == "stat_category":
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏":
            user_states[user_id] = {"menu": "stat_period", "stat_category": "mindfulness"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stat_period_keyboard())
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É":
            user_states[user_id] = {"menu": "stat_period", "stat_category": "fitness"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=stat_period_keyboard())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stat_category_keyboard())
        return

    if state.get("menu") == "stat_period":
        now = now_moscow()
        if text == "üìÖ –ó–∞ –¥–µ–Ω—å":
            period_start = now - timedelta(days=1)
        elif text == "üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é":
            period_start = now - timedelta(days=7)
        elif text == "üîô –ù–∞–∑–∞–¥":
            user_states[user_id] = {"menu": "stat_category"}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=stat_category_keyboard())
            return
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.", reply_markup=stat_period_keyboard())
            return

        cat = state["stat_category"]
        sessions = mindfulness_sessions.get(user_id, []) if cat == "mindfulness" else fitness_sessions.get(user_id, [])
        title = "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏" if cat == "mindfulness" else "—Å–ø–æ—Ä—Ç–∞"

        filtered = [(s["time"], s) for s in sessions if s["time"] >= period_start]
        if not filtered:
            await update.message.reply_text(f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title}.", reply_markup=main_keyboard())
            return

        msg = (f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {title}* –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {period_start.strftime('%d.%m.%Y')} –ø–æ {now.strftime('%d.%m.%Y')}:\n"
               f"üî¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(filtered)}\n\n")

        for dt, s in filtered:
            time_str = dt.strftime("%d.%m %H:%M")
            note = s.get("note", "").strip()
            dur = s.get("duration_seconds")
            dur_str = f"‚è± {format_duration_from_seconds(dur)}" if dur else ""

            entry = f"üîπ *{time_str}*"
            if dur_str:
                entry += f" | {dur_str}"
            entry += "\n"
            if note and note != "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏":
                entry += f"  üìù _{note}_"
            else:
                entry += f"  üí¨ _–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏_"
            msg += entry + "\n\n"

        user_states.pop(user_id, None)
        await update.message.reply_text(msg, reply_markup=main_keyboard(), parse_mode="Markdown")
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_keyboard())

# ----------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------
async def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.initialize()
    await app.start()

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    app.create_task(run_webserver())
    app.create_task(self_pinger())
    app.create_task(fitness_auto_finish_checker(app))
    app.create_task(daily_report(app))

    # –ó–∞–ø—É—Å–∫ polling
    await app.run_polling()

async def main():
    while True:
        try:
            await run_bot()
        except Exception as e:
            logger.exception("üí• –ë–æ—Ç —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ %d —Å–µ–∫...", RESTART_DELAY_SECONDS)
            await asyncio.sleep(RESTART_DELAY_SECONDS)

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.exception("Fatal error in main loop")
