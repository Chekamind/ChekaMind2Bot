import os
import logging
import random
import asyncio
import json
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo  # Python 3.9+
from aiohttp import web, ClientSession
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ -----------------
DATA_FILE = "data.json"
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("ERROR: Set BOT_TOKEN environment variable")

MOSCOW_TZ = ZoneInfo("Europe/Moscow")

SAVE_INTERVAL_SECONDS = 60           # –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–∫
SELF_PING_INTERVAL_SECONDS = 240     # —Å–∞–º–æ–ø–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (4 –º–∏–Ω—É—Ç—ã)
AUTO_FINISH_CHECK_SECONDS = 300      # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
AUTO_FINISH_HOURS = 3                # –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ 3 —á–∞—Å–æ–≤
RESTART_DELAY_SECONDS = 5            # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –•—Ä–∞–Ω–∏–ª–∏—â–∞ -----------------
mindfulness_sessions = {}   # user_id -> list of {'time': iso_str, 'note': str}
fitness_sessions = {}       # user_id -> list of {'time': iso_str, 'note': str, 'duration_seconds': int}
active_fitness_sessions = {}  # user_id -> datetime (moscow tz)
user_states = {}            # user_id -> dict —Å–æ—Å—Ç–æ—è–Ω–∏—è (awaiting_note_confirm, awaiting_note –∏ —Ç.–ø.)

# ----------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -----------------
MAIN_KEYBOARD = [
    [KeyboardButton("üí° –ó–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è")],
    [KeyboardButton("‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!")],
    [KeyboardButton("‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
]

STAT_CATEGORY_KEYBOARD = [
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏")],
    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

STAT_PERIOD_KEYBOARD = [
    [KeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å"), KeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é")],
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
]

NOTE_CONFIRM_KEYBOARD = [
    [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
]

NOTE_INPUT_KEYBOARD = [
    [KeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"), KeyboardButton("üîÑ –û—Ç–º–µ–Ω–∏—Ç—å")]
]

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------
def now_moscow() -> datetime:
    return datetime.now(MOSCOW_TZ)

def dt_to_iso(dt: datetime) -> str:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ISO —Å timezone
    return dt.isoformat()

def iso_to_dt(iso: str) -> datetime:
    # –ü–∞—Ä—Å–∏–º ISO —Å —É—á—ë—Ç–æ–º –∑–æ–Ω—ã
    return datetime.fromisoformat(iso)

def load_data():
    global mindfulness_sessions, fitness_sessions
    if not os.path.exists(DATA_FILE):
        mindfulness_sessions = {}
        fitness_sessions = {}
        return
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        mindfulness_sessions = data.get("mindfulness_sessions", {})
        fitness_sessions = data.get("fitness_sessions", {})
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ int (json —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
        mindfulness_sessions = {int(k): v for k, v in mindfulness_sessions.items()}
        fitness_sessions = {int(k): v for k, v in fitness_sessions.items()}
        logger.info("Data loaded from %s", DATA_FILE)
    except Exception as e:
        logger.error("Failed to load data: %s", e)
        mindfulness_sessions = {}
        fitness_sessions = {}

def save_data():
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è json
        data = {
            "mindfulness_sessions": {str(k): v for k, v in mindfulness_sessions.items()},
            "fitness_sessions": {str(k): v for k, v in fitness_sessions.items()}
        }
        tmp = DATA_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        os.replace(tmp, DATA_FILE)
        logger.info("Data saved to %s", DATA_FILE)
    except Exception as e:
        logger.error("Failed to save data: %s", e)

def add_mindfulness_session(user_id: int, time_dt: datetime, note: str):
    entry = {"time": dt_to_iso(time_dt), "note": note}
    mindfulness_sessions.setdefault(user_id, []).append(entry)
    save_data()

def add_fitness_session(user_id: int, time_dt: datetime, note: str, duration: timedelta = None):
    entry = {"time": dt_to_iso(time_dt), "note": note}
    if duration is not None:
        entry["duration_seconds"] = int(duration.total_seconds())
    fitness_sessions.setdefault(user_id, []).append(entry)
    save_data()

def format_duration_from_seconds(seconds: int) -> str:
    td = timedelta(seconds=seconds)
    total_seconds = int(td.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    secs = total_seconds % 60
    if hours:
        return f"{hours}—á {minutes}–º {secs}—Å"
    if minutes:
        return f"{minutes}–º {secs}—Å"
    return f"{secs}—Å"

# ----------------- Webserver (keep-alive) -----------------
async def handle_root(request):
    return web.Response(text="Bot is alive!")

async def run_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logger.info("Webserver started on port 8080")

# ----------------- –°–∞–º–æ–ø–∏–Ω–≥ (–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç—ë–ø–ª—ã–º) -----------------
async def self_pinger():
    await asyncio.sleep(5)  # –¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
    url = "http://127.0.0.1:8080/"  # –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±—Å–µ—Ä–≤–µ—Ä
    logger.info("Self-pinger started, pinging %s every %s sec", url, SELF_PING_INTERVAL_SECONDS)
    async with ClientSession() as sess:
        while True:
            try:
                async with sess.get(url, timeout=10) as resp:
                    logger.debug("Self-ping status %s", resp.status)
            except Exception as e:
                logger.warning("Self-ping failed: %s", e)
            await asyncio.sleep(SELF_PING_INTERVAL_SECONDS)

# ----------------- –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -----------------
async def fitness_auto_finish_checker(app):
    while True:
        now = now_moscow()
        to_finish = []
        for user_id, start_time in list(active_fitness_sessions.items()):
            duration = now - start_time
            if duration > timedelta(hours=AUTO_FINISH_HOURS):
                to_finish.append((user_id, start_time, duration))
        for user_id, start_time, duration in to_finish:
            del active_fitness_sessions[user_id]
            add_fitness_session(user_id, start_time, "–ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è)", duration)
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è –í–∞—à–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –Ω–∞—á–∞—Ç–∞—è –≤ {start_time.strftime('%H:%M')}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {AUTO_FINISH_HOURS} —á–∞—Å–æ–≤."
                )
            except Exception as e:
                logger.error("Failed to notify user %s about auto-finish: %s", user_id, e)
        await asyncio.sleep(AUTO_FINISH_CHECK_SECONDS)

# ----------------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ -----------------
async def periodic_save():
    while True:
        await asyncio.sleep(SAVE_INTERVAL_SECONDS)
        save_data()

# ----------------- Handlers -----------------
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states.pop(user_id, None)
    reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    user_id = update.effective_user.id
    state = user_states.get(user_id, {})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note_confirm"):
        if text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É":
            user_states[user_id] = {
                "awaiting_note": True,
                "session_type": state["session_type"],
                "session_time": state["session_time"],
                "duration": state.get("duration")
            }
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∑–∞–º–µ—Ç–∫—É:",
                reply_markup=ReplyKeyboardMarkup(NOTE_INPUT_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
            )
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            user_states.pop(user_id, None)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
    if state.get("awaiting_note"):
        if text in ["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "üîÑ –û—Ç–º–µ–Ω–∏—Ç—å"]:
            note = "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏"
        else:
            note = text

        session_time = state["session_time"]
        session_type = state["session_type"]
        duration = state.get("duration")

        if session_type == "fitness":
            add_fitness_session(user_id, session_time, note, duration)
        else:
            add_mindfulness_session(user_id, session_time, note)

        user_states.pop(user_id, None)
        if note == "–ë–µ–∑ –∑–∞–º–µ—Ç–∫–∏":
            await update.message.reply_text("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
        else:
            await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ¬´{note}¬ª", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text == "üí° –ó–∞–¥–∞–Ω–∏–µ":
        await update.message.reply_text(random.choice([
            "–ó–∞–¥–∞—á–∞: –æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Ç–µ–ª–æ.",
            "–ó–∞–¥–∞—á–∞: —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤.",
            "–ó–∞–¥–∞—á–∞: –ø–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è.",
        ]))
        return

    if text == "üìÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è":
        await update.message.reply_text(random.choice([
            "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á—Ç–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è?",
            "–†–µ—Ñ–ª–µ–∫—Å–∏—è: —á–µ–≥–æ —Ç—ã –¥–æ–±–∏–ª—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        ]))
        return

    if text == "‚ú® –Ø –æ—Å–æ–∑–Ω–∞–Ω!":
        now = now_moscow()
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "mindfulness",
            "session_time": now,
            "duration": None
        }
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –æ–± –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏?", reply_markup=ReplyKeyboardMarkup(NOTE_CONFIRM_KEYBOARD, resize_keyboard=True))
        return

    if text == "‚è± –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        if user_id in active_fitness_sessions:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é.")
            return
        start_time = now_moscow()
        active_fitness_sessions[user_id] = start_time
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "fitness",
            "session_time": start_time,
            "duration": None
        }
        await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞! –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?", reply_markup=ReplyKeyboardMarkup(NOTE_CONFIRM_KEYBOARD, resize_keyboard=True))
        return

    if text == "üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        start_time = active_fitness_sessions.get(user_id)
        if not start_time:
            await update.message.reply_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.")
            return
        duration = now_moscow() - start_time
        del active_fitness_sessions[user_id]
        user_states[user_id] = {
            "awaiting_note_confirm": True,
            "session_type": "fitness",
            "session_time": start_time,
            "duration": duration
        }
        await update.message.reply_text(
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {str(duration).split('.')[0]}. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–º–µ—Ç–∫—É?",
            reply_markup=ReplyKeyboardMarkup(NOTE_CONFIRM_KEYBOARD, resize_keyboard=True)
        )
        return

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        user_states[user_id] = {"menu": "stat_category"}
        reply_markup = ReplyKeyboardMarkup(STAT_CATEGORY_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        if user_states.get(user_id, {}).get("menu"):
            user_states.pop(user_id, None)
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
        return

    # –í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ / –ø–µ—Ä–∏–æ–¥–æ–≤
    state = user_states.get(user_id, {})
    if state.get("menu") == "stat_category":
        await process_stat_category(update, text, user_id)
        return
    elif state.get("menu") == "stat_period":
        await process_stat_period(update, text, user_id)
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))

# ----------------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -----------------
async def process_stat_category(update: Update, text: str, user_id: int):
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏":
        user_states[user_id] = {"menu": "stat_period", "stat_category": "mindfulness"}
        reply_markup = ReplyKeyboardMarkup(STAT_PERIOD_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä—Ç—É":
        user_states[user_id] = {"menu": "stat_period", "stat_category": "fitness"}
        reply_markup = ReplyKeyboardMarkup(STAT_PERIOD_KEYBOARD, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ø–æ—Ä—Ç—É:", reply_markup=reply_markup)
    elif text == "üîô –ù–∞–∑–∞–¥":
        user_states.pop(user_id, None)
        await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")

async def process_stat_period(update: Update, text: str, user_id: int):
    state = user_states.get(user_id)
    if not state:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))
        return

    stat_category = state.get("stat_category")
    now = now_moscow()

    if text == "üìÖ –ó–∞ –¥–µ–Ω—å":
        period_start = now - timedelta(days=1)
    elif text == "üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é":
        period_start = now - timedelta(days=7)
    elif text == "üîô –ù–∞–∑–∞–¥":
        user_states[user_id] = {"menu": "stat_category"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=ReplyKeyboardMarkup(STAT_CATEGORY_KEYBOARD, resize_keyboard=True, one_time_keyboard=True))
        return
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.")
        return

    if stat_category == "mindfulness":
        sessions = mindfulness_sessions.get(user_id, [])
        title = "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏"
    else:
        sessions = fitness_sessions.get(user_id, [])
        title = "—Å–ø–æ—Ä—Ç–∞"

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–≤ ISO —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –º–æ—Å–∫–æ–≤—Å–∫–æ–π tz)
    filtered = []
    for s in sessions:
        s_dt = iso_to_dt(s["time"])
        if s_dt >= period_start:
            filtered.append((s_dt, s))

    if not filtered:
        await update.message.reply_text(f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {title}.")
        return

    msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {title} –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {period_start.strftime('%d.%m.%Y')} –ø–æ {now.strftime('%d.%m.%Y')}:\n"
    msg += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {len(filtered)}\n\n"

    for s_dt, s in filtered:
        time_str = s_dt.strftime("%d.%m %H:%M")
        note = s.get("note", "")
        dur_seconds = s.get("duration_seconds")
        dur_str = f", –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration_from_seconds(dur_seconds)}" if dur_seconds is not None else ""
        msg += f"- {time_str}: {note}{dur_str}\n"

    user_states.pop(user_id, None)
    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True))

# ----------------- –ó–∞–ø—É—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º -----------------
async def run_bot_instance():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏ –∂–¥—ë—Ç, –ø–æ–∫–∞ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)."""
    load_data()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Initializing bot application")
    await app.initialize()
    await app.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    app.create_task(run_webserver())
    app.create_task(self_pinger())
    app.create_task(fitness_auto_finish_checker(app))
    app.create_task(periodic_save())

    # –ó–∞–ø—É—Å–∫ polling
    await app.updater.start_polling()
    logger.info("Bot polling started")

    # –ñ–¥—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ (–∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
    await asyncio.Event().wait()

    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–º
    try:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()
    except Exception:
        pass

async def startup_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –≤ —Ü–∏–∫–ª–µ ‚Äî –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç."""
    while True:
        try:
            await run_bot_instance()
        except Exception as e:
            logger.exception("Bot crashed, will restart after delay: %s", e)
            await asyncio.sleep(RESTART_DELAY_SECONDS)
        else:
            # –ï—Å–ª–∏ run_bot_instance –≤—ã—à–µ–ª –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ), –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            logger.warning("Bot instance stopped unexpectedly without exception, restarting...")
            await asyncio.sleep(RESTART_DELAY_SECONDS)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –µ—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω (Replit), –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task,
# –∏–Ω–∞—á–µ asyncio.run
if __name__ == "__main__":
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_running_loop()
    except RuntimeError:
        # –ù–µ—Ç ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º
        asyncio.run(startup_loop())
    else:
        # –ï—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–∞—Å–∫ (–¥–ª—è Replit / Jupyter)
        loop.create_task(startup_loop())
        loop.run_forever()
